GoによるAPI開発と使い所
ゲーム開発の【ごっついい感じ】ビヨンド勉強会 #7
8 Feb 2017
Tags: go, API

Yusuke Hatanaka
@hatajoe

* me

[[https://twitter.com/hatajoe][@hatajoe]]
[[https://kug2.connpass.com/][#kug2]]
[[https://gglt.connpass.com/][#gglt]]

* working at Clover Lab.,inc.

.image yurudora-ss.png

* outline

- ソーシャルゲーム開発
- Go
- Go導入時に気をつけたいこと
- 以上を踏まえた使い所
- 設計やテストの話(時間があれば)

* ソーシャルゲーム開発

* ソーシャルゲーム開発

- ブラウザからネイティブへ
- 小規模から大規模へ

* ブラウザからネイティブへ

- HTMLはJSONへ
- サーバーサイドでレンダリングする必要が無くなった
- サーバーサイドからviewという概念が無くる
- バリデーションとデータ保存としてのAPI

* 小規模から大規模へ

- 開発チームの大規模化
- うちの場合だとエンジニア1~3名から4~6名に
- サーバー・クライアントの分業化
- I/Fをかっちりしたくなってくる

* Go

* Go

- 静的型付言語
- シンプルなシンタックス
- 便利なツールたち
- 豊富な標準パッケージ
- マルチプラットフォーム
- 並行処理

* 静的型付言語

- 開発の規模が大きくなると型の恩恵も大きくなる
- クライアントとI/Fを合わせるために変更が多い
- こういった変更は型があると安心感が違う

* 静的型付言語

    // Go
    type Response struct {
        ID    int64
        name  string
        email string
    }

    // PHP
    class Response {
        public $id;
        public $name;
        public $email;
    }

- 実際はもっと複雑
- 変数の追加削除、変数名の変更はすべてコンパイルエラーに
- 例えPHPだとしても型を作った方が楽。ただし変更はしんどい。

* シンプルなシンタックス

- bnf記法で130数行らしい
    ちなみに・・
    PHP     690行程度
    Python  400行程度
    Ruby    300行程度
    だそうです。

- 誰が書いても大体同じようなコードになる
- トリッキーな書き方は出来ない。愚直に書く。

* シンプルなシンタックス

if文

    package main

    import "fmt"

    func main() {
        a := 1

        // if-else
        if a > 0 {
            fmt.Println("expected")
        } else {
            fmt.Println("unexpected")
        }

        // こんな書き方も。errはこのifブロック内のスコープとして扱われる
        if err := someDanger(); err != nil {
            fmt.Println(err.Error())
        }
    }


* シンプルなシンタックス

for文 (while文は存在しない)

    package main

    import "fmt"

    func main() {
        // 10回ループ
        for $i := 0; $i < 10; $i++ {
            fmt.Println("Hello")
        }

        // 無限ループ
        for {
            fmt.Println("Hello")
        }

        // foreach的な
        li := []int{1 ,2, 3, 4}
        for k, v := range li {
            fmt.Printf("%d => %d\n", $k, $v)
        }
    }


* シンプルなシンタックス

switch文

    package main

    import "fmt"

    func main() {
        a := "foo"

        // switch文にbreakは必要ない
        switch a {
        case "foo":
            fmt.Println("foo")
        case "bar":
            fmt.Println("bar")
        default:
            fmt.Println("baz")
        }
    }


* シンプルなシンタックス

構造体とメソッド

    package foo

    type Foo struct {
        ID  int64  // publicフィールドは最初が大文字
        key string // privateフィールドは最初が小文字
    }

    // privateメソッドは最初が小文字
    func (m Foo) translateKey() string {
        return key + "fookey"
    }

    // publicメソッドは最初が大文字
    func (m Foo) GetKey() string {
        return m.translateKey()
    }

    // フィールドを更新したい場合はポインタレシーバーにする（*の部分）
    func (m *Foo) SetKey(k string) {
       m.key = k
    }


* 便利なツールたち

- [[https://godoc.org/golang.org/x/tools][golang.org/x/tools]] にたくさん
- gofmt
- goimports
- ..etc

* gofmt

- コマンド一発でコードを整形
    インデント
    スペース
    改行
    ..etc

- エディタと連携して保存時にフォーマットするのが基本
- あるいは最後のコミットでフォーマットするのもお洒落。知らんけど。

* goimports

- コマンド一発で使用・未使用パッケージを解決
- demo

* 豊富な標準パッケージ

- 大抵のことは標準でまかなえるので依存パッケージが少なくて済む
- 特にnet/httpはお世話になるはず
- その他のパッケージはGitHubなどのホスティングサービスから取得

    % go get github.com/go-sql-driver/mysql

* マルチプラットフォーム

- 様々な環境向けにクロスコンパイルが可能
- Macで作ったツールをWindowsで動かしたり

    % GOOS=windows GOARCH=amd64 go build .

- [[https://github.com/mitchellh/gox][github.com/mitchellh/gox]] が便利

* 並行処理

- 並列処理を言語がサポートしている
- 複雑な排他処理もチャンネルを使うことでシンプルに

* 並行処理

    package main

    import (
    	"fmt"
    	"sync"
    )

    // func mainはmain goroutine
    func main() {
    	count := 0
    	inc := make(chan int)
    	dec := make(chan int)
    	end := make(chan bool)
    	wg := sync.WaitGroup{}

* 並行処理

    	// go で新しいgoroutine生成
    	wg.Add(1)
    	go func() {
    		// 以下はmain goroutineとは非同期的に処理される
    		for i := 0; i < 10; i++ {
    			inc <- i
    		}
    		wg.Done()
    	}()

    	wg.Add(1)
    	go func() {
    		for i := 0; i < 10; i++ {
    			dec <- i
    		}
    		wg.Done()
    	}()

    	go func() {
    		wg.Wait()
    		end <- true
    	}()

* 並行処理

    LOOP:
    	for {
    		select {
    		case i := <-inc:
    			count += i
    			fmt.Println("inc: ", count)
    		case d := <-dec:
    			count -= d
    			fmt.Println("dec: ", count)
    		case <-end:
    			break LOOP
    		}
    	}

    	fmt.Println("result: ", count)
    }

* Go導入時に気をつけたいこと

* Go導入時に気をつけたいこと

- デプロイ環境を先に整える
- ロギング環境を先に整える
- サーバー構成
- ロードアベレージ
- 積極的にコードを自動生成する
- 速度の恩恵

Goに限った話ではないかもしれない
ワンダークラウンはゲームAPIから管理画面、公式サイトまでバックエンドは全てGo製

* デプロイ環境を先に整える

- 動作確認にはコンパイルが必要
- 開発中はコンパイルして転送を幾度となく繰り返すので自動化
- Jenkins + Ansible
- 最初に用意するのが肝心

* ロギング環境を先に整える

- ちょっとログ出したいと思ってもコンパイルして転送が必要
- エラーハンドリングとnilチェックは手を抜かない
- fluentd + Elasticsearch + kibana
- こちらも最初に用意するのが肝心

* サーバー構成

- Goで実装したサーバーをデーモン化するために工夫が必要
- Nginx + supervisord

* ロードアベレージ

- GoはデフォルトだとプロセスをCPU数以上作らない
- そのため基本的にはロードアベレージがCPU数以上にならない
- runtimeが軽量スレッド（goroutine）を生成してマルチコアを使い切ってくれる
- 外形監視などを使ってレスポンスタイムを見るのが確実
- mackerel

* 積極的にコードを自動生成する

- ORMなど違う型で同じコードは大量に出来る
- リフレクションは使えるが遅い
- go generate

* 速度の恩恵

- 結局はレスポンスタイムのほとんどがI/O待ち
- PHPでもCodeIgniterなど速いものはある
- ブートストラップのコストを省けるという点はある

* 以上を踏まえた使い所

* 以上を踏まえた使い所

- Goを使うと良さそう
- Goじゃなくても良さそう

* Goを使うと良さそう

- 機能のマイクロサービス化
- CLIツール
- リアルタイム系サーバー

* マイクロサービス化

- 頻繁に更新しない部分を抜き出してミドルウェア化
- 案件の言語に依存しない形で導入出来る
- うちでは主にプロキシ系に活用
    ユーザー認証
    レシート認証
    バージョンチェック
    メンテナンス判定
    ...etc

* CLIツール

- コード生成ツール
- マイグレーションツール
- マスターデータのチェックツール
- その他なんでも
- CLIツールはGoで作らない理由はあまり無いと思う

ちなみに、僕が作ったマイグレーションツール誰か使ってみて欲しい・・・

[[https://github.com/dev-cloverlab/carpenter][dev-cloverlab/carpenter: Carpenter is a tool to manage DB schema and data]]

* リアルタイム系サーバー

- WebSocketなどでデータをブロードキャストするようなものとかすぐに作れる
- ただしまだプロダクション利用はしたことが無い

サンプルプログラム
[[https://github.com/hatajoe/go-websocket-json-broadcaster][hatajoe/go-websocket-json-broadcaster]]

* Goじゃなくても良さそう

- ゲームAPI
- 管理画面

* ゲームAPI

- 汎用処理として切り出せない部分
- 運営時に頻繁に更新するようなもの
- 運営時のコードベースだとコンパイルに1分程度かかったりする
- うちの場合だとビルドとマイグレーションは常にセットだったので結構かかったり
- この蓄積が割りと無視できなくなってくる

* 管理画面

- SPAと割り切ればアリ
- GoのAPIを叩いて結果をHTMLにするようなものをLL言語で書いた方が楽
- とは言え、モデル層が使いまわせなくなるのでそれはそれでツライ

* 設計やテストの話（時間があれば）

* 設計やテストの話

- フレームワーク何が良い？
- 全リクエストで共通の処理がしたい
- ユーザーや環境に依存したくない
- コードを再利用したい
- ユニットテストをしたい
- E2Eテストをしたい

* フレームワーク何が良い？

- 標準パッケージの net/http で十分
- Go1.7でcontextが追加
- Go1.8でシャットダウンハンドラが追加
- URLパラメータをパースしたい場合は何か使うと良いかも(/user/1 みたいなやつ）
- 採用例としては echo, goji, martiniを良く聞く気がする
- MySQL: [[https://github.com/go-sql-driver/mysql][go-sql-driver/mysql]]
- Memcache: [[https://github.com/bradfitz/gomemcache][bradfitz/gomemcache]]
- Redis: [[https://github.com/garyburd/redigo][garyburd/redigo]]

* 全リクエストで共通の処理がしたい

- 共通の処理はミドルウェアとして切り出す
- あるいはまったく別のプロジェクトとして

* net/httpを使用した例

    package main

    import (
    	"fmt"
    	"log"
    	"net/http"
    )

    func Middleware(fn http.HandlerFunc) http.HandlerFunc {
    	return func(w http.ResponseWriter, r *http.Request) {
    		log.Println(r.URL.Path)
    		fn.ServeHTTP(w, r)
    	}
    }

    func main() {
    	http.HandleFunc("/", Middleware(func(w http.ResponseWriter, r *http.Request) {
    		fmt.Fprint(w, "Hello, World")
    	}))
    	http.ListenAndServe(":8080", nil)
    }


* ユーザーや環境に依存したくない

- 全てcontextに詰めるとデバッグが楽
- ユーザーごとのキーデータ
- 現在時刻
- 動作環境フラグ
- これらは全て１つのオブジェクトに押し込む
- それがリクエストハンドラに渡されるイメージ
- contextを差し替えると挙動を変えられるように

* contextを使用した例

    package main

    import (
    	"context"
    	"fmt"
    	"log"
    	"net/http"
    )

    func Logger(fn http.HandlerFunc) http.HandlerFunc {
    	return func(w http.ResponseWriter, r *http.Request) {
    		log.Println(r.URL.Path)
    		fn.ServeHTTP(w, r)
    	}
    }

    func WithContext(fn http.HandlerFunc) http.HandlerFunc {
    	return func(w http.ResponseWriter, r *http.Request) {
    		ctx := r.Context()
    		ctx = context.WithValue(ctx, "DEBUG", true)
    		cr := r.WithContext(ctx)
    		fn.ServeHTTP(w, cr)
    	}
    }

* contextを使用した例

    func main() {
    	http.HandleFunc("/", Logger(WithContext(func(w http.ResponseWriter, r *http.Request) {
    		ctx := r.Context()
    		fmt.Fprint(w, "DEBUG MODE: ", ctx.Value("DEBUG"))
    	})))
    	http.ListenAndServe(":8080", nil)
    }

* コードを再利用したい

- データに振る舞いを持たせない
- メソッドを作るよりパッケージを切ってインターフェース受け取るように
- ただしエディタで追いづらくなるけど
- インターフェースは後付け出来るので最初は無しから始めてもよいかも

* interface例

    package main

    import "fmt"

    type Receivable interface {
    	GetID() int
    	GetNum() int
    }

* interface例

    type MemberItem struct {
    	ID  int
    	Num int
    }

    func ReceiveItem(items []*MemberItem, item Receivable) {
    	for _, v := range items {
    		if v.ID != item.GetID() {
    			continue
    		}
    		v.Num += item.GetNum()
    	}
    }

* interface例

    // ポーション
    type Portion struct{}

    func (m Portion) GetID() int {
    	return 1
    }

    func (m Portion) GetNum() int {
    	return 1
    }

    // エリクサー
    type Elixir struct{}

    func (m Elixir) GetID() int {
    	return 2
    }

    func (m Elixir) GetNum() int {
    	return 1
    }

* interface例

    func main() {
    	mi := []*MemberItem{
    		&MemberItem{ID: 1, Num: 0},
    		&MemberItem{ID: 2, Num: 0},
    	}
    	items := []Receivable{
    		Portion{},
    		Elixir{},
    		Portion{},
    		Portion{},
    	}
    	for _, v := range items {
    		ReceiveItem(mi, v)
    	}

    	for _, v := range mi {
    		fmt.Printf("%#v\n", v)
    	}
    }

* ユニットテストをしたい

- まずは言語標準の test コマンドを使ってみる
- 標準でも機能は十分

* ユニットテスト例

    package math

    func Add(a, b int) int {
    	return a + b
    }

* ユニットテスト例

    package math_test

    import "testing"
    import "github.com/hatajoe/beyond7/math"

    func TestAdd(t *testing.T) {
    	cases := []struct {
    		expect int
    		value1 int
    		value2 int
    	}{
    		{2, 1, 1},
    		{4, 2, 2},
    		{5, 3, 2},
    		{7, 6, 1},
    	}

    	for _, c := range cases {
    		if res := math.Add(c.value1, c.value2); res != c.expect {
    			t.Errorf("err: expect %d, actual %d\n", c.expect, res)
    		}
    	}
    }

* E2Eテストをしたい

- net/http のテストは net/httptest で簡単に出来る

* net/httptest例

    func TestNormal(t *testing.T) {
        ts := httptest.NewServer(sampleHandler)
        defer ts.Close()

        // リクエストの送信先はテストサーバのURLへ。
        r, err := http.Get(ts.URL)
        if err != nil {
            t.Fatalf("Error by http.Get(). %v", err)
        }

        data, err := ioutil.ReadAll(r.Body)
        if err != nil {
            t.Fatalf("Error by ioutil.ReadAll(). %v", err)
        }

        if "Hello HTTP Test" != string(data) {
            t.Fatalf("Data Error. %v", string(data))
        }
    }

参考URL: [[http://qiita.com/ttyokoyama/items/61adfac5144cf300553f]]

* ご静聴ありがとうございました

